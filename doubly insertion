#include<stdio.h>
#include<stdlib.h>

struct Node{
    int data;
    struct Node *next;
    struct Node *prev;
};

void insertLast(struct Node** head, int data);
void insertStart(struct Node** head, int data);

// helper function for insertion after position
int calcSize(struct Node* node){
    int size=0;

    while(node!=NULL){
        node = node->next;
        size++;
    }
    return size;
}
void insertPosition(int pos, int data, struct Node** head)
{
    int size = calcSize(*head);

    //If pos is 0 then should use insertStart method
    //If pos is less than or equal to 0 then can't enter at all
    //If size is lesser than pos then bufferbound issue
    if(pos < 0 || size < pos) 
    {
        printf("Can't insert, %d is not a valid position\n",pos); 
        return; 
    } 

    // Insert after 0th position would mean insert at start 
    if(pos == 0) 
        insertStart(head, data); 

    // insert after size'th position would mean insert at the last 
    else if(pos == size) 
        insertLast(head, data); 

    else { 
        struct Node* temp = *head; 
        struct Node* newNode = (struct Node*) malloc(sizeof(struct Node)); 

        newNode->data = data;
        newNode->next = NULL;

        while(--pos)
            temp=temp->next;
        
        //temp2 = 10 as 12->next is 10
        struct Node* temp2 = temp->next;
        
        //(25)->next = 10 as 12->next is 10 
        newNode->next= temp->next;
        //(25)->prev = 12
        newNode->prev = temp;
        
        // (12)->next = 25
        temp->next = newNode;
        // (10)->prev = 25
        temp2->prev = newNode;
        
        //new node added in b/w 12 and 10
    }
}

void insertLast(struct Node** head, int data){

    struct Node* newNode = (struct Node*) malloc(sizeof(struct Node));

    newNode->data = data;
    newNode->next = NULL;

    //need this if there is no node present in linked list at all
    if(*head==NULL){
        *head = newNode;
        newNode->prev = NULL;
        return;
    }

    struct Node* temp = *head;

    while(temp->next!=NULL)
        temp = temp->next;

    temp->next = newNode;
    newNode->prev = temp;
}

void insertStart(struct Node** head, int data){

    struct Node* newNode = (struct Node*) malloc(sizeof(struct Node));

    newNode->data = data;
    newNode->next = *head;
    newNode->prev = NULL;

    //If the linked list already had atleast 1 node
    if(*head !=NULL)
        (*head)->prev = newNode;
        // *head->prev = newNode; would not work it has (*head) must be used

    //changing the new head to this freshly entered node
    *head = newNode; 
}

// function to print the doubly linked list
void display(struct Node* node) 
{ 
    struct Node *end;
    printf("List in Forward direction: ");
    
    while (node != NULL) { 
        printf(" %d ", node->data); 
        end = node;
        node = node->next; 
    }

    printf("\nList in backward direction: ");

    while (end != NULL) { 
        printf(" %d ", end->data); 
        end = end->prev; 
    }
}

int main()
{
    struct Node* head = NULL;

    /*Need & i.e. address as we
    need to change head address */
    insertStart(&head,12);
    insertStart(&head,16);
    insertStart(&head,20);

    insertLast(&head,10);
    insertLast(&head,14);
    insertLast(&head,18);
    insertLast(&head,11);
    
    //Inserts after 3rd position
    insertPosition(3,25,&head);
  
    /*No need for & i.e. address as we do not
    need to change head address
    */
    display(head); 
    return 0; 
}
